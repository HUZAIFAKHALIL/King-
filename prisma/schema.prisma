generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  isBot     Boolean  @default(false)
  message   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Promotion {
  id           Int           @id @default(autoincrement())
  title        String
  description  String?
  discount     Float // Discount percentage or fixed amount
  discountType DiscountType // ENUM: PERCENTAGE or FIXED
  isActive     Boolean       @default(true)
  startDate    DateTime?
  endDate      DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  serviceId    Int? // If null, applies to all services
  service      Service?      @relation(fields: [serviceId], references: [id])
  reservations Reservation[]
}

model LoyaltyDiscount {
  id           Int          @id @default(autoincrement())
  userId       Int          @unique
  discount     Float // Discount percentage or fixed amount
  discountType DiscountType
  threshold    Int // Number of reservations required
  user         User         @relation(fields: [userId], references: [id])
}

model SignupDiscount {
  id           Int          @id @default(autoincrement())
  userId       Int          @unique
  discount     Float // Fixed discount amount
  discountType DiscountType
  isUsed       Boolean      @default(false)
  createdAt    DateTime     @default(now())
  user         User         @relation(fields: [userId], references: [id])
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

model User {
  id                   Int                    @id @default(autoincrement())
  name                 String
  email                String                 @unique
  phone                String                 @unique
  dob                  DateTime
  gender               String
  password             String
  createdAt            DateTime               @default(now())
  token                String?
  tokenExpiry          DateTime?
  updatedAt            DateTime               @default(now()) @updatedAt
  role                 UserRole               @default(BUYER)
  chatMessages         ChatMessage[]
  CompletedReservation CompletedReservation[]
  receivedRequests     PartnerRequest[]       @relation("ReceivedRequests")
  sentRequests         PartnerRequest[]       @relation("SentRequests")
  Payment              Payment[]
  reservations         Reservation[]
  Review               Review[]
  services             Service[]
  loyaltyDiscount      LoyaltyDiscount?
  signupDiscount       SignupDiscount?
}

model Service {
  id                 Int                 @id @default(autoincrement())
  type               String
  name               String
  description        String?
  location           String?
  rating             Float?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  isApproved         Boolean             @default(false)
  sellerId           Int
  activityServices   ActivityService[]
  carServices        CarService[]
  flightServices     FlightService[]
  gymServices        GymService[]
  hallServices       HallService[]
  hotelServices      HotelService[]
  playgroundServices PlaygroundService[]
  ReservationItem    ReservationItem[]
  Review             Review[]
  promotions         Promotion[]
  salonServices      SalonService[]
  seller             User                @relation(fields: [sellerId], references: [id])
}

model SalonService {
  id             Int     @id @default(autoincrement())
  serviceId      Int
  salonSpecialty String
  price          Float
  service        Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model HotelService {
  id         Int     @id @default(autoincrement())
  serviceId  Int
  roomType   String
  amenities  String?
  hotelStars Int?
  noOfRooms  Int?
  price      Float
  service    Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model CarService {
  id          Int     @id @default(autoincrement())
  serviceId   Int
  carModel    String
  carType     String
  carCapacity Int
  price       Float
  service     Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model GymService {
  id              Int     @id @default(autoincrement())
  serviceId       Int
  gymFacilities   String?
  membershipTypes String?
  operatingHours  String?
  price           Float
  service         Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model FlightService {
  id             Int     @id @default(autoincrement())
  serviceId      Int
  airlineName    String
  flightClass    String
  seatsAvailable Int
  price          Float
  service        Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model HallService {
  id           Int     @id @default(autoincrement())
  serviceId    Int
  hallCapacity Int
  eventType    String
  price        Float
  service      Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model ActivityService {
  id           Int     @id @default(autoincrement())
  serviceId    Int
  activityType String
  price        Float
  service      Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model PlaygroundService {
  id             Int     @id @default(autoincrement())
  serviceId      Int
  playgroundType String
  ageGroup       String?
  equipment      String?
  price          Float
  service        Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model Reservation {
  id                 Int               @id @default(autoincrement())
  userId             Int
  status             String
  totalPrice         Float
  createdAt          DateTime          @default(now())
  updatedAt          DateTime              @default(now()) @updatedAt
  user               User              @relation(fields: [userId], references: [id])
  reservationItems   ReservationItem[]
  appliedPromotionId Int? // Links to a promotion, if applicable
  appliedPromotion   Promotion?        @relation(fields: [appliedPromotionId], references: [id])
}

model ReservationItem {
  id                   Int                   @id @default(autoincrement())
  reservationId        Int
  serviceId            Int
  price                Float
  startTime            DateTime
  endTime              DateTime
  updatedAt            DateTime              @db.Timestamptz
  modifiedAt           DateTime?
  editable             Boolean               @default(true)
  userId               String?
  CompletedReservation CompletedReservation?
  PartnerRequest       PartnerRequest[]
  Payment              Payment?
  reservation          Reservation           @relation(fields: [reservationId], references: [id])
  service              Service               @relation(fields: [serviceId], references: [id])
}

model PartnerRequest {
  id                Int             @id @default(autoincrement())
  requestUser       Int
  partnerUser       Int?
  status            String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  filter            Json
  reservationItemID Int
  partner           User?           @relation("ReceivedRequests", fields: [partnerUser], references: [id])
  requester         User            @relation("SentRequests", fields: [requestUser], references: [id])
  reservationItem   ReservationItem @relation(fields: [reservationItemID], references: [id])
}

model CompletedReservation {
  id            Int             @id @default(autoincrement())
  reservationId Int             @unique
  userId        Int
  totalPrice    Float
  completedAt   DateTime        @default(now())
  reservation   ReservationItem @relation(fields: [reservationId], references: [id])
  user          User            @relation(fields: [userId], references: [id])
}

model Payment {
  id            Int             @id @default(autoincrement())
  reservationId Int             @unique
  userId        Int
  amount        Float
  status        String
  createdAt     DateTime        @default(now())
  reservation   ReservationItem @relation(fields: [reservationId], references: [id])
  user          User            @relation(fields: [userId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  serviceId Int
  rating    Float
  comment   String?
  createdAt DateTime @default(now())
  Service   Service  @relation(fields: [serviceId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  BUYER
  SELLER
  ADMIN
}
